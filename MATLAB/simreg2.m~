function t_est = simreg2(scene, scn_im, model, mdl_im, num_iters)
%SIMREG2 Register model to scene, weighting correspondence by image similarity
%   Detailed explanation goes here

if ~exist('W', 'var')
    W = eye(size(model,1));
end

scene = append_ones(scene);
model = append_ones(model);

% Initialize transform estimate as identity matrix
t_est = eye(3);

for i = 1:num_iters

    % Apply transform to model and find nearest neighbors
    model_current = model*t_est;
    indices = knnsearch(scene, model_current);

    % Generate weights using image similarity via Hu moments
    for i=1:size(model, 1)
        
    end
    
    % Iterate transform by linear regression
    t_est_new = t_est*linreg(model_current, scene(indices, :), W);

    % Break if there is no change in t_est
    if ~all(t_est_new == t_est, 'all')
        t_est = t_est_new;
    else
        model_current = model*t_est;
        break
    end 

end


end

% Custom linear regression allows non-identity weight matrix
function B = linreg(X, Y, W)

if ~exist('W', 'var')
    W = eye(size(X,1));
end
B = inv(X.'*W*X)*X.'*W*Y;

end

% Append a column of ones to the input matrix if it is not already Nx3
function mat = append_ones(mat)

if size(mat, 2) < 3
    mat = [mat, ones(size(mat, 1),1)];
end

end


function r = corr(a, b)

    r = sum(a.*b)/(sum(a)*sum(b);

end